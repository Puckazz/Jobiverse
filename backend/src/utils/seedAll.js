const mongoose = require('mongoose')
const Major = require('../models/Major')
const Specialization = require('../models/Specialization')
const Account = require('../models/Account')
const CV = require('../models/CV')
const CVUpload = require('../models/CVUpload')
const Employer = require('../models/Employer')
const Favorite = require('../models/Favorite')
const Notification = require('../models/Notification')
const Project = require('../models/Project')
const Student = require('../models/Student')

// Data
const majorsData = require('./majorsData.json')
const base64Image = require('./base64Image.js')
const avatarBuffer = Buffer.from(base64Image, 'base64')

require('dotenv').config({ path: '../../.env' })

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => {
  console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB')
}).catch((err) => {
  console.error('‚ùå L·ªói k·∫øt n·ªëi:', err)
})

async function seedAll() {
  try {
    await Promise.all([
      Account.deleteMany({}),
      CV.deleteMany({}),
      CVUpload.deleteMany({}),
      Employer.deleteMany({}),
      Favorite.deleteMany({}),
      Major.deleteMany({}),
      Notification.deleteMany({}),
      Project.deleteMany({}),
      Specialization.deleteMany({}),
      Student.deleteMany({})
    ])

    console.log('üóëÔ∏è ƒê√£ x√≥a d·ªØ li·ªáu c≈©')

    const majors = []
    const specializations = []

    for (const majorData of majorsData) {
      const major = new Major({
        name: majorData.name,
        description: majorData.description
      })
      await major.save()
      majors.push(major)

      for (const spec of majorData.specializations) {
        const specialization = new Specialization({
          name: spec.name,
          description: spec.description,
          major: major._id
        })
        await specialization.save()
        specializations.push(specialization)
      }
    }

    const accounts = []
    const password = '123456'

    for (let i = 1; i <= 10; i++) {
      let role, authProvider
      if (i <= 5) {
        role = 'student'
        authProvider = 'local'
      } else if (i <= 9) {
        role = 'employer'
        authProvider = 'google'
      } else {
        role = 'admin'
        authProvider = 'local'
      }

      const account = new Account({
        role,
        authProvider,
        avatar: {
          data: avatarBuffer,
          contentType: 'image/png'
        },
        email: `user${i}@example.com`,
        phoneNumber: `098765432${i}`,
        password: password,
        profile: true
      })
      await account.save()
      accounts.push(account)
    }

    // 3. T·∫°o sinh vi√™n
    const students = []
    const universities = ['ƒê·∫°i h·ªçc B√°ch Khoa', 'ƒê·∫°i h·ªçc Kinh t·∫ø', 'ƒê·∫°i h·ªçc S∆∞ ph·∫°m', 'ƒê·∫°i h·ªçc FPT', 'ƒê·∫°i h·ªçc RMIT']

    for (let i = 0; i < 5; i++) {
      const selectedMajor = majors[Math.floor(Math.random() * majors.length)]
      const relatedSpecializations = specializations.filter(s => s.major.toString() === selectedMajor._id.toString())
      const selectedSpecialization = relatedSpecializations.length > 0
        ? relatedSpecializations[Math.floor(Math.random() * relatedSpecializations.length)]._id
        : null

      const student = new Student({
        account: accounts[i]._id,
        mssv: `SV00${i + 1}`,
        name: `Sinh vi√™n ${i + 1}`,
        major: selectedMajor._id,
        specialization: selectedSpecialization,
        interests: ['L·∫≠p tr√¨nh', 'Thi·∫øt k·∫ø', 'Kinh doanh'],
        university: universities[i % universities.length]
      })
      await student.save()
      students.push(student)
    }

    // 4. T·∫°o nh√† tuy·ªÉn d·ª•ng
    const employers = []
    const industries = ['C√¥ng ngh·ªá', 'T√†i ch√≠nh', 'Gi√°o d·ª•c', 'Y t·∫ø', 'B·∫•t ƒë·ªông s·∫£n']

    for (let i = 5; i < 9; i++) {
      const employer = new Employer({
        account: accounts[i]._id,
        businessScale: i % 2 === 0 ? 'Private individuals' : 'Companies',
        companyName: `C√¥ng ty ${i - 4}`,
        representativeName: `Ng∆∞·ªùi ƒë·∫°i di·ªán ${i - 4}`,
        position: 'Gi√°m ƒë·ªëc',
        interests: ['Tuy·ªÉn d·ª•ng', 'Ph√°t tri·ªÉn'],
        industry: industries[(i - 5) % industries.length],
        companyInfo: `Th√¥ng tin c√¥ng ty ${i - 4}`,
        prove: `https://example.com/prove/${i - 4}`,
        address: `ƒê·ªãa ch·ªâ ${i - 4}`
      })
      await employer.save()
      employers.push(employer)
    }

    // 5. T·∫°o CV
    const cvs = []
    for (let i = 0; i < students.length; i++) {
      for (let j = 1; j <= 2; j++) {
        const cv = new CV({
          student: students[i]._id,
          title: `CV ${j} c·ªßa ${students[i].name}`,
          name: students[i].name,
          birthday: new Date(2000, i, j + 1),
          gender: i % 2 === 0 ? 'Nam' : 'N·ªØ',
          phone: `098765432${i}`,
          email: accounts[i].email,
          address: `ƒê·ªãa ch·ªâ sinh vi√™n ${i + 1}`,
          summary: `T√≥m t·∫Øt kinh nghi·ªám ${j}`,
          desiredPosition: `V·ªã tr√≠ mong mu·ªën ${j}`,
          experiences: [{
            position: 'Th·ª±c t·∫≠p sinh',
            company: 'C√¥ng ty th·ª±c t·∫≠p',
            start: new Date(2022, 1, 1),
            end: new Date(2022, 6, 30),
            description: 'M√¥ t·∫£ kinh nghi·ªám'
          }],
          educations: [{
            degree: 'C·ª≠ nh√¢n',
            school: students[i].university,
            start: new Date(2018, 8, 1),
            end: new Date(2023, 5, 30)
          }],
          skills: ['JavaScript', 'React', 'Node.js']
        })
        await cv.save()
        cvs.push(cv)
      }
    }

    // 6. T·∫£i l√™n CV
    const cvUploads = []
    for (let i = 0; i < students.length; i++) {
      for (let j = 1; j <= 2; j++) {
        const cvUpload = new CVUpload({
          student: students[i]._id,
          title: `CV Upload ${j}`,
          fileName: `cv_${students[i].mssv}_${j}.pdf`,
          file: Buffer.from(`N·ªôi dung CV ${j} c·ªßa ${students[i].name}`)
        })
        await cvUpload.save()
        cvUploads.push(cvUpload)
      }
    }

    // 7. C·∫≠p nh·∫≠t CV m·∫∑c ƒë·ªãnh cho sinh vi√™n
    for (let i = 0; i < students.length; i++) {
      students[i].defaultCV = {
        cv: cvs[i * 2]._id,
        type: 'CV'
      }
      await students[i].save()
    }

    // 8. T·∫°o d·ª± √°n
    const projects = []
    const projectTitles = [
      'Ph√°t tri·ªÉn ·ª©ng d·ª•ng web',
      'Thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng',
      'Ph√¢n t√≠ch d·ªØ li·ªáu',
      'Marketing Online',
      'Qu·∫£n l√Ω d·ª± √°n'
    ]

    for (let i = 0; i < employers.length; i++) {
      for (let j = 1; j <= 2; j++) {
        const selectedMajor = majors[Math.floor(Math.random() * majors.length)]
        const relatedSpecializations = specializations.filter(s => s.major.toString() === selectedMajor._id.toString())
        const selectedSpecialization = relatedSpecializations.length > 0
          ? [relatedSpecializations[Math.floor(Math.random() * relatedSpecializations.length)]._id]
          : []

        const project = new Project({
          account: accounts[i + 5]._id,
          title: `${projectTitles[(i + j) % projectTitles.length]} ${j}`,
          description: `M√¥ t·∫£ d·ª± √°n ${j}`,
          location: {
            province: `T·ªânh ${j}`,
            district: `Qu·∫≠n ${j}`,
            ward: `Ph∆∞·ªùng ${j}`
          },
          major: [selectedMajor._id],
          specialization: selectedSpecialization,
          content: `N·ªôi dung chi ti·∫øt d·ª± √°n ${j}`,
          workingTime: 'To√†n th·ªùi gian',
          status: 'open',
          salary: 10000000 + i * 1000000,
          expRequired: j,
          deadline: new Date(2024, 11, 30),
          hiringCount: j + 1,
          workType: j % 2 === 0 ? 'online' : 'offline'
        })
        await project.save()
        projects.push(project)
      }
    }

    // Th√™m 2 d·ª± √°n b·ªï sung ƒë·ªÉ ƒë·ªß 10
    for (let i = 0; i < 2; i++) {
      const project = new Project({
        account: accounts[5]._id,
        title: `D·ª± √°n b·ªï sung ${i + 1}`,
        description: `M√¥ t·∫£ d·ª± √°n b·ªï sung ${i + 1}`,
        location: {
          province: `T·ªânh ${i + 3}`,
          district: `Qu·∫≠n ${i + 3}`,
          ward: `Ph∆∞·ªùng ${i + 3}`
        },
        major: [majors[i % majors.length]._id],
        content: `N·ªôi dung chi ti·∫øt d·ª± √°n b·ªï sung ${i + 1}`,
        workingTime: 'B√°n th·ªùi gian',
        status: 'open',
        salary: 8000000,
        expRequired: 0,
        deadline: new Date(2024, 10, 15),
        hiringCount: 1,
        workType: 'online'
      })
      await project.save()
      projects.push(project)
    }

    // 9. T·∫°o ·ª©ng vi√™n cho d·ª± √°n
    for (const project of projects) {
      const applicantCount = Math.min(3, students.length)
      for (let i = 0; i < applicantCount; i++) {
        const student = students[i]
        const cvType = i % 2 === 0 ? 'CV' : 'CVUpload'
        const cvRef = i % 2 === 0
          ? cvs.find(cv => cv.student.equals(student._id))._id
          : cvUploads.find(cv => cv.student.equals(student._id))._id

        project.applicants.push({
          student: student._id,
          cv: cvRef,
          cvType,
          coverLetter: `Th∆∞ xin vi·ªác c·ªßa ${student.name} cho d·ª± √°n ${project.title}`,
          status: ['pending', 'rejected', 'accepted'][i % 3]
        })
      }
      await project.save()
    }

    // 10. T·∫°o m·ª•c y√™u th√≠ch
    const favorites = []
    for (let i = 0; i < 5; i++) {
      for (let j = 0; j < 2; j++) {
        const favorite = new Favorite({
          account: accounts[i]._id,
          project: projects[(i + j) % projects.length]._id
        })
        await favorite.save()
        favorites.push(favorite)
      }
    }

    // 11. T·∫°o th√¥ng b√°o
    const notifications = []
    for (let i = 0; i < 10; i++) {
      const notification = new Notification({
        account: accounts[i % accounts.length]._id,
        content: `Th√¥ng b√°o quan tr·ªçng #${i + 1}`
      })
      await notification.save()
      notifications.push(notification)
    }

    console.log('‚úÖ ƒê√£ t·∫°o d·ªØ li·ªáu m·∫´u th√†nh c√¥ng:')
    console.log(`- T√†i kho·∫£n: ${accounts.length}`)
    console.log(`- Sinh vi√™n: ${students.length}`)
    console.log(`- Nh√† tuy·ªÉn d·ª•ng: ${employers.length}`)
    console.log(`- CV: ${cvs.length}`)
    console.log(`- CV T·∫£i l√™n: ${cvUploads.length}`)
    console.log(`- D·ª± √°n: ${projects.length}`)
    console.log(`- M·ª•c y√™u th√≠ch: ${favorites.length}`)
    console.log(`- Th√¥ng b√°o: ${notifications.length}`)
    console.log(`- Ng√†nh h·ªçc: ${majors.length}`)
    console.log(`- Chuy√™n ng√†nh: ${specializations.length}`)

  } catch (err) {
    console.error('‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu:', err)
  } finally {
    mongoose.connection.close()
  }
}

seedAll()
